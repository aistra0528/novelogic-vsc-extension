{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Novelogic",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#entities"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#text"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#expressions"
		}
	],
	"repository": {
		"comments": {
			"name": "comment.line.number-sign.novelogic",
			"match": "(?<=^(    )*)#.*(?=$)"
		},
		"entities": {
			"patterns": [
				{
					"name": "entity.name.type.novelogic",
					"match": "(?<=^(    )*)@[A-Za-z]\\w*|[A-Z]\\w*(?=\\.[A-Za-z]\\w*(\\(| = | \\+= | -= | \\*= | /= | \\?\\? ))"
				}
			]
		},
		"format_argument": {
			"name": "variable.argument.format.novelogic",
			"match": "{[A-Za-z_]\\w*}"
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.name.novelogic",
					"match": "(?<=^(    )*([A-Z]\\w*\\.)?)([a-z_]\\w*\\.[A-Za-z_]|[A-Za-z_])\\w*(?= = | \\+= | -= | \\*= | /= | \\?\\? )|(?<=^(    )*)[a-z_]\\w*(?=\\.[A-Za-z_]\\w*\\()"
				},
				{
					"include": "#format_argument"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\\\."
				},
				{
					"include": "#format_argument"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.operator.wordlike.gdscript",
					"match": "\\b(and|or|not|in)\\b"
				},
				{
					"name": "keyword.language.gdscript",
					"match": "\\b(is|as)\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric.novelogic",
					"match": "\\b([\\d]+\\.)?\\d+\\b"
				},
				{
					"name": "constant.language.gdscript",
					"match": "\\b(true|false|null)\\b"
				}
			]
		},
		"text": {
			"patterns": [
				{
					"name": "constant.numeric.novelogic.dialogue",
					"match": "(?<=^(    )*)[A-Za-z]\\w*: "
				}
			]
		},
		"expression_argument": {
			"patterns": [
				{
					"name": "entity.name.type.novelogic",
					"match": "[A-Z]\\w*(?=\\.[A-Za-z_])"
				},
				{
					"name": "variable.argument.novelogic",
					"match": "((?<= |\\(|\\[|{)[a-z_]|(?<=\\.)[A-Za-z_])\\w*(?= |,|\\.|\\[|\\)|\\]|}|: |:$|$)"
				}
			]
		},
		"expression_patterns": {
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#expression_argument"
				}
			]
		},
		"functions": {
			"begin": "([A-Za-z]\\w*)(\\()",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.novelogic"
				},
				"2": {
					"name": "punctuation.definition.arguments.begin.novelogic"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.end.novelogic"
				}
			},
			"patterns": [
				{
					"include": "#expression_patterns"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"begin": "\\${",
					"end": "}",
					"patterns": [
						{
							"include": "#expression_patterns"
						}
					]
				},
				{
					"begin": "(?<=^(    )*([A-Za-z]\\w*\\.)?[A-Za-z_]\\w*)( = | \\+= | -= | \\*= | /= )",
					"end": "$",
					"patterns": [
						{
							"include": "#expression_patterns"
						}
					]
				},
				{
					"begin": "((?<=^(    )*)((-|<)> (([A-Za-z]\\w*@)?[A-Za-z]\\w*(?= \\?: |$))))",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.novelogic"
						}
					},
					"end": "$",
					"patterns": [
						{
							"include": "#expression_patterns"
						}
					]
				},
				{
					"begin": "((?<=^(    )*)(if |elif |else(?=:)|- (.+(?= \\?: )|.+)))",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.flow.novelogic"
						}
					},
					"end": "$",
					"patterns": [
						{
							"include": "#expression_patterns"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.ntl"
}